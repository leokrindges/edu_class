// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String    @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  avatar       String?   @db.VarChar(255)
  phone        String?   @unique @db.VarChar(15)
  address      String?   @db.VarChar(255)
  birthDate    DateTime? @map("data_nasc") @db.Date
  password     String    @db.VarChar(100)
  refreshToken String?   @map("refresh_token")
  type         UserType  @default(TEACHER)
  isAdmin      Boolean   @default(false) @map("is_admin")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  teacher    Teacher?

  @@index([email])
  @@index([phone])
  @@index([type])
  @@map("users")
}

enum UserType {
  TEACHER
  STUDENT
  ADMIN
}

model Student {
  id String @id @default(uuid())

  // login opcional (aluno pode acessar a plataforma)
  // userId String? @unique
  // user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  name      String        @db.VarChar(150)
  email     String?       @db.VarChar(100)
  phone     String?       @db.VarChar(15)
  avatar    String?       @db.VarChar(255)
  birthDate DateTime?     @map("birth_date") @db.Date
  notes     String?       @db.VarChar(255)
  status    StudentStatus @default(ACTIVE)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")

  enrollments Enrollment[]
  // lessons     Lesson[]
  // payments    Payment[]

  @@index([status])
  @@index([deletedAt])
  @@map("students")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
}

model Teacher {
  id        String    @id @default(uuid())
  userId    String    @unique @map("user_id")
  timezone  String    @default("America/Sao_Paulo")
  currency  String    @default("BRL")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  disciplines Discipline[]
  // lessons     Lesson[]
  // payments    Payment[]

  @@index([userId])
  @@map("teachers")
}

model Enrollment {
  id         String    @id @default(uuid())
  teacherId  String    @map("teacher_id")
  studentId  String    @map("student_id")
  startedAt  DateTime  @default(now()) @map("started_at")
  endedAt    DateTime? @map("ended_at")
  priceCents Int?      @map("price_cents")
  currency   String?   @map("currency")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  // lesson  Lesson[]

  @@unique([teacherId, studentId])
  @@index([teacherId])
  @@index([studentId])
  @@map("enrollments")
}

model Discipline {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  description   String?   @db.VarChar(255)
  teacherId     String    @map("teacher_id")
  pricePerClass Decimal?  @map("price_per_class") @db.Decimal(10, 2)
  currency      String?   @default("BRL") @db.VarChar(3)
  durationMin   Int?      @map("duration_min")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, name])
  @@index([name])
  @@index([teacherId])
  @@index([deletedAt])
  @@map("disciplines")
}

// model Lesson {
//   id           String       @id @default(uuid())
//   teacherId    String       @map("teacher_id")
//   studentId    String       @map("student_id")
//   enrollmentId String?      @map("enrollment_id")
//   startsAt     DateTime     @map("starts_at")
//   durationMin  Int          @map("duration_min")
//   status       LessonStatus @default(SCHEDULED)
//   type         LessonType   @default(ONLINE)
//   priceCents   Int?         @map("price_cents")
//   currency     String?
//   location     String?
//   meetingLink  String?      @map("meeting_link")
//   notes        String?
//   createdAt    DateTime     @default(now()) @map("created_at")
//   updatedAt    DateTime     @updatedAt @map("updated_at")
//   deletedAt    DateTime?    @map("deleted_at")

//   teacher    Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
//   student    Student     @relation(fields: [studentId], references: [id], onDelete: Restrict)
//   enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
//   // payments      Payment[]

//   @@unique([teacherId, studentId, startsAt])
//   @@index([teacherId, startsAt])
//   @@index([studentId, startsAt])
//   @@index([status])
//   @@index([deletedAt])
//   @@map("lessons")
// }

// enum LessonStatus {
//   SCHEDULED
//   COMPLETED
//   CANCELED
//   MISSED
// }

// enum LessonType {
//   ONLINE
//   IN_PERSON
// }

// model Payment {
//   id          String         @id @default(uuid())
//   teacherId   String
//   studentId   String
//   lessonId    String?        // pode ser avulso/pacote (sem aula espec√≠fica)

//   amountCents Int
//   currency    String         @default("BRL")
//   status      PaymentStatus  @default(PENDING)
//   method      PaymentMethod?
//   dueDate     DateTime?
//   paidAt      DateTime?

//   reference   String?        @unique // ex.: "2025-09#001"
//   notes       String?

//   createdAt   DateTime       @default(now())
//   updatedAt   DateTime       @updatedAt
//   deletedAt   DateTime?

//   teacher     Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
//   student     Student        @relation(fields: [studentId], references: [id], onDelete: Restrict)
//   lesson      Lesson?        @relation(fields: [lessonId], references: [id], onDelete: SetNull)

//   @@index([teacherId, status])
//   @@index([studentId, status])
//   @@index([dueDate])
//   @@index([deletedAt])
//   @@map("payments")
// }
